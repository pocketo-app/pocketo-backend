import com.diffplug.spotless.LineEnding

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'io.spring.javaformat' version '0.0.38'
	id 'com.diffplug.spotless' version '6.18.0'
}

group = 'win.pocketo'
version = '0.0.1-SNAPSHOT'
description = 'Pocketo API backend'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(Test).configureEach {
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	forkEvery = 100
	reports.html.required = false
	reports.junitXml.required = false
}

tasks.withType(JavaCompile).configureEach {
	options.fork = true
	options.incremental = true
}

bootJar {
	layered {
		enabled = true // Default is true
	}
	doLast {
		// Only run if bootJar is not up-to-date
		if (gradle.taskGraph.hasTask(':dockerImageBuildIfChanged')) {
			println('Something changed, rebuild the Docker image')
			exec {
				def imageName = "tonghoangvu/${project.name}:${project.version}"
				def jarFile = archiveFileName.get()
				environment('DOCKER_BUILDKIT', 1)
				commandLine = [
						'docker',
						'image',
						'build',
						'-t',
						imageName,
						'--build-arg',
						"JAR_FILE=${jarFile}",
						'.'
				]
			}
		}
	}
}

tasks.register('dockerImageBuildIfChanged') {
	// This task is just a signal to trigger Docker image build in bootJar
	group = 'application'
	description = 'Build Docker image if code is changed'
	dependsOn = ['bootJar']
}

tasks.register('dockerImageBuild', Exec) {
	group = 'application'
	description = 'Build Docker image'
	dependsOn = ['bootJar']
	def imageTag = project.findProperty('imageTag') ?: project.version
	def imageName = "tonghoangvu/${project.name}:${imageTag}"
	def jarFile = bootJar.archiveFileName.get()
	environment('DOCKER_BUILDKIT', 1)
	commandLine = [
			'docker',
			'image',
			'build',
			'-t',
			imageName,
			'--build-arg',
			"JAR_FILE=${jarFile}",
			'.'
	]
}

tasks.register('dockerImagePush', Exec) {
	group = 'application'
	description = 'Push Docker image'
	def imageTag = project.findProperty('imageTag') ?: project.version
	def imageName = "tonghoangvu/${project.name}:${imageTag}"
	commandLine = ['docker', 'image', 'push', imageName]
}

tasks.register('dockerComposeUp', Exec) {
	group = 'application'
	description = 'Run Docker Compose up'
	def imageName = "tonghoangvu/${project.name}:${project.version}"
	environment('APP_IMAGE', imageName)
	commandLine = ['docker', 'compose', '--env-file', './pocketo-config/.env', 'up', '-d']
}

tasks.register('dockerComposeDown', Exec) {
	group = 'application'
	description = 'Run Docker Compose down'
	def imageName = "tonghoangvu/${project.name}:${project.version}"
	environment('APP_IMAGE', imageName)
	commandLine = ['docker', 'compose', '--env-file', './pocketo-config/.env', 'down']
}

tasks.register('dockerComposeLogs', Exec) {
	group = 'application'
	description = 'View Docker Compose logs'
	def imageName = "tonghoangvu/${project.name}:${project.version}"
	environment('APP_IMAGE', imageName)
	commandLine = ['docker', 'compose', '--env-file', './pocketo-config/.env', 'logs', '-f']
}

// https://fabianlee.org/2022/11/20/gradle-running-more-than-one-command-in-an-exec-task/
tasks.register('dockerComposeRestartApp') {
	group = 'application'
	description = 'Reload app container in Docker Compose'
	def imageName = "tonghoangvu/${project.name}:${project.version}"
	def serviceName = 'app-blue'
	// Can not use restart command, must stop and up again
	// https://docs.docker.com/engine/reference/commandline/compose_restart/
	doFirst {
		exec {
			environment('APP_IMAGE', imageName)
			commandLine = ['docker', 'compose', '--env-file', './pocketo-config/.env', 'stop', serviceName]
		}
	}
	doLast {
		exec {
			environment('APP_IMAGE', imageName)
			commandLine = [
					'docker',
					'compose',
					'--env-file',
					'./pocketo-config/.env',
					'up',
					'-d',
					serviceName
			]
		}
	}
}

spotless {
	encoding('UTF-8')
	lineEndings(LineEnding.GIT_ATTRIBUTES) // See .gitattributes
	java {
		// Use Spring Java Format (waiting for Spotless integration)
		removeUnusedImports()
		importOrder('|\\#', 'win.pocketo|\\#win.pocketo')
		// formatAnnotations() // Conflict with Spring Java Format
	}
	format 'Yaml', {
		target('*.yml')
		trimTrailingWhitespace()
		endWithNewline()
		indentWithSpaces(2) // Not work
	}
	format 'Others', {
		target('*.*')
		targetExclude('*.java', '*.yml')
		trimTrailingWhitespace()
		endWithNewline()
		indentWithTabs()
	}
}
